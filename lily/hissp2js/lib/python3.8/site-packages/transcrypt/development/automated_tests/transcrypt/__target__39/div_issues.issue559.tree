file: Module 
	body: list 
		element: Import 
			names: list 
				element: alias 
					name: str = div_issues.issue559.mylib
					asname: str = mylib
		element: Expr 
			value: Constant 
				value: str = 
There are two ways to make a module re-export everything imported:

1. Name it __init__.py
2. Compile the whole application that it's part of, with the -xr / --xreex switch

In this case, mylib deliberately has been given the role of the module with the reexporting __init__.py,
although this file has the same name and does the same thing.

				kind: NoneType = None
		element: FunctionDef 
			name: str = run559
			args: arguments 
				posonlyargs: list 
				args: list 
					element: arg 
						arg: str = autoTester
						annotation: NoneType = None
						type_comment: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = mylib
								ctx: Load 
							attr: str = mylibHello
							ctx: Load 
						args: list 
							element: Name 
								id: str = autoTester
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = cl
							ctx: Store 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = mylib
								ctx: Load 
							attr: str = mylibClass
							ctx: Load 
						args: list 
							element: Name 
								id: str = autoTester
								ctx: Load 
						keywords: list 
					type_comment: NoneType = None
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = cl
								ctx: Load 
							attr: str = checkSymbols
							ctx: Load 
						args: list 
						keywords: list 
			decorator_list: list 
			returns: NoneType = None
			type_comment: NoneType = None
	type_ignores: list 
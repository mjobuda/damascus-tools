file: Module 
	body: list 
		element: FunctionDef 
			name: str = run
			args: arguments 
				posonlyargs: list 
				args: list 
					element: arg 
						arg: str = autoTester
						annotation: NoneType = None
						type_comment: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = even
							ctx: Store 
					value: SetComp 
						elt: BinOp 
							left: Constant 
								value: int = 2
								kind: NoneType = None
							op: Mult 
							right: Name 
								id: str = i
								ctx: Load 
						generators: list 
							element: comprehension 
								target: Name 
									id: str = i
									ctx: Store 
								iter: List 
									elts: list 
										element: Constant 
											value: int = 0
											kind: NoneType = None
										element: Constant 
											value: int = 9
											kind: NoneType = None
										element: Constant 
											value: int = 1
											kind: NoneType = None
										element: Constant 
											value: int = 7
											kind: NoneType = None
										element: Constant 
											value: int = 2
											kind: NoneType = None
										element: Constant 
											value: int = 8
											kind: NoneType = None
										element: Constant 
											value: int = 3
											kind: NoneType = None
										element: Constant 
											value: int = 6
											kind: NoneType = None
										element: Constant 
											value: int = 4
											kind: NoneType = None
										element: Constant 
											value: int = 5
											kind: NoneType = None
									ctx: Load 
								ifs: list 
								is_async: int = 0
					type_comment: NoneType = None
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = even
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = odd
							ctx: Store 
					value: SetComp 
						elt: BinOp 
							left: BinOp 
								left: Constant 
									value: int = 2
									kind: NoneType = None
								op: Mult 
								right: Name 
									id: str = i
									ctx: Load 
							op: Add 
							right: Constant 
								value: int = 1
								kind: NoneType = None
						generators: list 
							element: comprehension 
								target: Name 
									id: str = i
									ctx: Store 
								iter: List 
									elts: list 
										element: Constant 
											value: int = 5
											kind: NoneType = None
										element: Constant 
											value: int = 6
											kind: NoneType = None
										element: Constant 
											value: int = 7
											kind: NoneType = None
										element: Constant 
											value: int = 8
											kind: NoneType = None
										element: Constant 
											value: int = 9
											kind: NoneType = None
										element: Constant 
											value: int = 4
											kind: NoneType = None
										element: Constant 
											value: int = 3
											kind: NoneType = None
										element: Constant 
											value: int = 1
											kind: NoneType = None
										element: Constant 
											value: int = 2
											kind: NoneType = None
										element: Constant 
											value: int = 0
											kind: NoneType = None
									ctx: Load 
								ifs: list 
								is_async: int = 0
					type_comment: NoneType = None
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = odd
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = even
								ctx: Load 
							attr: str = add
							ctx: Load 
						args: list 
							element: Constant 
								value: int = 12
								kind: NoneType = None
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = even
								ctx: Load 
							attr: str = add
							ctx: Load 
						args: list 
							element: Constant 
								value: int = 12
								kind: NoneType = None
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = even
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = even
								ctx: Load 
							attr: str = discard
							ctx: Load 
						args: list 
							element: Constant 
								value: int = 12
								kind: NoneType = None
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = even
								ctx: Load 
							attr: str = discard
							ctx: Load 
						args: list 
							element: Constant 
								value: int = 12
								kind: NoneType = None
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = even
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = uni
							ctx: Store 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = even
								ctx: Load 
							attr: str = union
							ctx: Load 
						args: list 
							element: Name 
								id: str = odd
								ctx: Load 
						keywords: list 
					type_comment: NoneType = None
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = uni
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Call 
								func: Attribute 
									value: Name 
										id: str = odd
										ctx: Load 
									attr: str = isdisjoint
									ctx: Load 
								args: list 
									element: Name 
										id: str = even
										ctx: Load 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Call 
								func: Attribute 
									value: Name 
										id: str = uni
										ctx: Load 
									attr: str = isdisjoint
									ctx: Load 
								args: list 
									element: Name 
										id: str = even
										ctx: Load 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Call 
								func: Attribute 
									value: Name 
										id: str = even
										ctx: Load 
									attr: str = issuperset
									ctx: Load 
								args: list 
									element: Name 
										id: str = uni
										ctx: Load 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Call 
								func: Attribute 
									value: Name 
										id: str = uni
										ctx: Load 
									attr: str = issuperset
									ctx: Load 
								args: list 
									element: Name 
										id: str = even
										ctx: Load 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Call 
								func: Attribute 
									value: Name 
										id: str = even
										ctx: Load 
									attr: str = issubset
									ctx: Load 
								args: list 
									element: Name 
										id: str = uni
										ctx: Load 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Call 
								func: Attribute 
									value: Name 
										id: str = uni
										ctx: Load 
									attr: str = issubset
									ctx: Load 
								args: list 
									element: Name 
										id: str = even
										ctx: Load 
								keywords: list 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = first
							ctx: Store 
					value: Set 
						elts: list 
							element: Constant 
								value: int = 4
								kind: NoneType = None
							element: Constant 
								value: int = 1
								kind: NoneType = None
							element: Constant 
								value: int = 0
								kind: NoneType = None
							element: Constant 
								value: int = 5
								kind: NoneType = None
							element: Constant 
								value: int = 3
								kind: NoneType = None
							element: Constant 
								value: int = 2
								kind: NoneType = None
							element: Constant 
								value: int = 6
								kind: NoneType = None
					type_comment: NoneType = None
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = first
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = second
							ctx: Store 
					value: Set 
						elts: list 
							element: Constant 
								value: int = 3
								kind: NoneType = None
							element: Constant 
								value: int = 5
								kind: NoneType = None
							element: Constant 
								value: int = 6
								kind: NoneType = None
							element: Constant 
								value: int = 9
								kind: NoneType = None
							element: Constant 
								value: int = 4
								kind: NoneType = None
							element: Constant 
								value: int = 7
								kind: NoneType = None
							element: Constant 
								value: int = 8
								kind: NoneType = None
					type_comment: NoneType = None
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = second
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = inter
							ctx: Store 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = first
								ctx: Load 
							attr: str = intersection
							ctx: Load 
						args: list 
							element: Name 
								id: str = second
								ctx: Load 
						keywords: list 
					type_comment: NoneType = None
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = inter
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = diff
							ctx: Store 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = first
								ctx: Load 
							attr: str = difference
							ctx: Load 
						args: list 
							element: Name 
								id: str = second
								ctx: Load 
						keywords: list 
					type_comment: NoneType = None
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = diff
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = symDiff
							ctx: Store 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = first
								ctx: Load 
							attr: str = symmetric_difference
							ctx: Load 
						args: list 
							element: Name 
								id: str = second
								ctx: Load 
						keywords: list 
					type_comment: NoneType = None
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = symDiff
								ctx: Load 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = aSet
							ctx: Store 
					value: Set 
						elts: list 
							element: Constant 
								value: int = 200
								kind: NoneType = None
							element: Constant 
								value: int = 4
								kind: NoneType = None
							element: Constant 
								value: int = 5
								kind: NoneType = None
							element: Constant 
								value: int = 100
								kind: NoneType = None
					type_comment: NoneType = None
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = aSet
								ctx: Load 
							attr: str = update
							ctx: Load 
						args: list 
							element: Name 
								id: str = first
								ctx: Load 
							element: Name 
								id: str = symDiff
								ctx: Load 
							element: Name 
								id: str = second
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = aSet
								ctx: Load 
						keywords: list 
			decorator_list: list 
			returns: NoneType = None
			type_comment: NoneType = None
	type_ignores: list 
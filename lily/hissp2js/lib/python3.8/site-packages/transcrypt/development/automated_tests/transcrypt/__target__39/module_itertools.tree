file: Module 
	body: list 
		element: ImportFrom 
			module: str = itertools
			names: list 
				element: alias 
					name: str = *
					asname: NoneType = None
			level: int = 0
		element: ImportFrom 
			module: str = math
			names: list 
				element: alias 
					name: str = pow
					asname: NoneType = None
			level: int = 0
		element: FunctionDef 
			name: str = fibonacci
			args: arguments 
				posonlyargs: list 
				args: list 
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Assign 
					targets: list 
						element: Tuple 
							elts: list 
								element: Name 
									id: str = a
									ctx: Store 
								element: Name 
									id: str = b
									ctx: Store 
							ctx: Store 
					value: Tuple 
						elts: list 
							element: Constant 
								value: int = 0
								kind: NoneType = None
							element: Constant 
								value: int = 1
								kind: NoneType = None
						ctx: Load 
					type_comment: NoneType = None
				element: For 
					target: Name 
						id: str = i
						ctx: Store 
					iter: Call 
						func: Name 
							id: str = range
							ctx: Load 
						args: list 
							element: Constant 
								value: int = 10
								kind: NoneType = None
						keywords: list 
					body: list 
						element: Expr 
							value: Yield 
								value: Name 
									id: str = a
									ctx: Load 
						element: Assign 
							targets: list 
								element: Tuple 
									elts: list 
										element: Name 
											id: str = a
											ctx: Store 
										element: Name 
											id: str = b
											ctx: Store 
									ctx: Store 
							value: Tuple 
								elts: list 
									element: Name 
										id: str = b
										ctx: Load 
									element: BinOp 
										left: Name 
											id: str = a
											ctx: Load 
										op: Add 
										right: Name 
											id: str = b
											ctx: Load 
								ctx: Load 
							type_comment: NoneType = None
					orelse: list 
					type_comment: NoneType = None
			decorator_list: list 
			returns: NoneType = None
			type_comment: NoneType = None
		element: Assign 
			targets: list 
				element: Name 
					id: str = squares
					ctx: Store 
			value: ListComp 
				elt: BinOp 
					left: Name 
						id: str = i
						ctx: Load 
					op: Mult 
					right: Name 
						id: str = i
						ctx: Load 
				generators: list 
					element: comprehension 
						target: Name 
							id: str = i
							ctx: Store 
						iter: Call 
							func: Name 
								id: str = range
								ctx: Load 
							args: list 
								element: Constant 
									value: int = 10
									kind: NoneType = None
							keywords: list 
						ifs: list 
						is_async: int = 0
			type_comment: NoneType = None
		element: Assign 
			targets: list 
				element: Name 
					id: str = chars
					ctx: Store 
			value: Constant 
				value: str = thequickbrownfoxjumpsoverthelazydog
				kind: NoneType = None
			type_comment: NoneType = None
		element: FunctionDef 
			name: str = run
			args: arguments 
				posonlyargs: list 
				args: list 
					element: arg 
						arg: str = autoTester
						annotation: NoneType = None
						type_comment: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Constant 
								value: str = islice count
								kind: NoneType = None
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = islice
											ctx: Load 
										args: list 
											element: Call 
												func: Name 
													id: str = count
													ctx: Load 
												args: list 
													element: Constant 
														value: int = 10
														kind: NoneType = None
													element: Constant 
														value: int = 2
														kind: NoneType = None
												keywords: list 
											element: Constant 
												value: int = 4
												kind: NoneType = None
											element: Constant 
												value: int = 40
												kind: NoneType = None
											element: Constant 
												value: int = 3
												kind: NoneType = None
										keywords: list 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Constant 
								value: str = islice cycle
								kind: NoneType = None
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = islice
											ctx: Load 
										args: list 
											element: Call 
												func: Name 
													id: str = cycle
													ctx: Load 
												args: list 
													element: Call 
														func: Name 
															id: str = fibonacci
															ctx: Load 
														args: list 
														keywords: list 
												keywords: list 
											element: Constant 
												value: int = 15
												kind: NoneType = None
										keywords: list 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Constant 
								value: str = repeat
								kind: NoneType = None
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = repeat
											ctx: Load 
										args: list 
											element: Constant 
												value: float = 3.14
												kind: NoneType = None
											element: Constant 
												value: int = 15
												kind: NoneType = None
										keywords: list 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Constant 
								value: str = islice repeat
								kind: NoneType = None
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = islice
											ctx: Load 
										args: list 
											element: Call 
												func: Name 
													id: str = repeat
													ctx: Load 
												args: list 
													element: Constant 
														value: float = 2.74
														kind: NoneType = None
												keywords: list 
											element: Constant 
												value: int = 15
												kind: NoneType = None
										keywords: list 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Constant 
								value: str = accumulate
								kind: NoneType = None
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = accumulate
											ctx: Load 
										args: list 
											element: Call 
												func: Name 
													id: str = range
													ctx: Load 
												args: list 
													element: Constant 
														value: int = 5
														kind: NoneType = None
												keywords: list 
										keywords: list 
								keywords: list 
						keywords: list 
				element: FunctionDef 
					name: str = add
					args: arguments 
						posonlyargs: list 
						args: list 
							element: arg 
								arg: str = total
								annotation: NoneType = None
								type_comment: NoneType = None
							element: arg 
								arg: str = element
								annotation: NoneType = None
								type_comment: NoneType = None
						vararg: NoneType = None
						kwonlyargs: list 
						kw_defaults: list 
						kwarg: NoneType = None
						defaults: list 
					body: list 
						element: Return 
							value: BinOp 
								left: Name 
									id: str = total
									ctx: Load 
								op: Add 
								right: Name 
									id: str = element
									ctx: Load 
					decorator_list: list 
					returns: NoneType = None
					type_comment: NoneType = None
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Constant 
								value: str = accumulate
								kind: NoneType = None
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = accumulate
											ctx: Load 
										args: list 
											element: List 
												elts: list 
													element: Constant 
														value: str = alamak
														kind: NoneType = None
													element: Constant 
														value: str = mirach
														kind: NoneType = None
													element: Constant 
														value: str = sirrah
														kind: NoneType = None
												ctx: Load 
											element: Name 
												id: str = add
												ctx: Load 
										keywords: list 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Constant 
								value: str = chain
								kind: NoneType = None
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = chain
											ctx: Load 
										args: list 
											element: Call 
												func: Name 
													id: str = fibonacci
													ctx: Load 
												args: list 
												keywords: list 
											element: Name 
												id: str = squares
												ctx: Load 
											element: Name 
												id: str = chars
												ctx: Load 
										keywords: list 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Constant 
								value: str = chain.from_iterable
								kind: NoneType = None
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Attribute 
											value: Name 
												id: str = chain
												ctx: Load 
											attr: str = from_iterable
											ctx: Load 
										args: list 
											element: List 
												elts: list 
													element: Constant 
														value: str = ape
														kind: NoneType = None
													element: Constant 
														value: str = node
														kind: NoneType = None
													element: Constant 
														value: str = mice
														kind: NoneType = None
													element: Constant 
														value: str = vim
														kind: NoneType = None
													element: Constant 
														value: str = sus
														kind: NoneType = None
													element: Constant 
														value: str = jet
														kind: NoneType = None
												ctx: Load 
										keywords: list 
								keywords: list 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = selectors
							ctx: Store 
					value: List 
						elts: list 
							element: Constant 
								value: bool = True
								kind: NoneType = None
							element: Constant 
								value: bool = True
								kind: NoneType = None
							element: Constant 
								value: bool = False
								kind: NoneType = None
							element: Constant 
								value: bool = True
								kind: NoneType = None
							element: Constant 
								value: bool = False
								kind: NoneType = None
							element: Constant 
								value: bool = False
								kind: NoneType = None
							element: Constant 
								value: bool = True
								kind: NoneType = None
							element: Constant 
								value: bool = True
								kind: NoneType = None
							element: Constant 
								value: bool = False
								kind: NoneType = None
							element: Constant 
								value: bool = True
								kind: NoneType = None
						ctx: Load 
					type_comment: NoneType = None
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Constant 
								value: str = compress
								kind: NoneType = None
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = compress
											ctx: Load 
										args: list 
											element: ListComp 
												elt: Call 
													func: Attribute 
														value: Constant 
															value: str = {}{}
															kind: NoneType = None
														attr: str = format
														ctx: Load 
													args: list 
														element: IfExp 
															test: Name 
																id: str = selector
																ctx: Load 
															body: Constant 
																value: str = take
																kind: NoneType = None
															orelse: Constant 
																value: str = leave
																kind: NoneType = None
														element: Name 
															id: str = index
															ctx: Load 
													keywords: list 
												generators: list 
													element: comprehension 
														target: Tuple 
															elts: list 
																element: Name 
																	id: str = index
																	ctx: Store 
																element: Name 
																	id: str = selector
																	ctx: Store 
															ctx: Store 
														iter: Call 
															func: Name 
																id: str = enumerate
																ctx: Load 
															args: list 
																element: Name 
																	id: str = selectors
																	ctx: Load 
															keywords: list 
														ifs: list 
														is_async: int = 0
											element: Name 
												id: str = selectors
												ctx: Load 
										keywords: list 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Constant 
								value: str = dropwhile
								kind: NoneType = None
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = dropwhile
											ctx: Load 
										args: list 
											element: Lambda 
												args: arguments 
													posonlyargs: list 
													args: list 
														element: arg 
															arg: str = x
															annotation: NoneType = None
															type_comment: NoneType = None
													vararg: NoneType = None
													kwonlyargs: list 
													kw_defaults: list 
													kwarg: NoneType = None
													defaults: list 
												body: Compare 
													left: Name 
														id: str = x
														ctx: Load 
													ops: list 
														element: Lt 
													comparators: list 
														element: Constant 
															value: int = 5
															kind: NoneType = None
											element: List 
												elts: list 
													element: Constant 
														value: int = 1
														kind: NoneType = None
													element: Constant 
														value: int = 4
														kind: NoneType = None
													element: Constant 
														value: int = 6
														kind: NoneType = None
													element: Constant 
														value: int = 4
														kind: NoneType = None
													element: Constant 
														value: int = 1
														kind: NoneType = None
												ctx: Load 
										keywords: list 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Constant 
								value: str = filterfalse
								kind: NoneType = None
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = filterfalse
											ctx: Load 
										args: list 
											element: Lambda 
												args: arguments 
													posonlyargs: list 
													args: list 
														element: arg 
															arg: str = x
															annotation: NoneType = None
															type_comment: NoneType = None
													vararg: NoneType = None
													kwonlyargs: list 
													kw_defaults: list 
													kwarg: NoneType = None
													defaults: list 
												body: BinOp 
													left: Name 
														id: str = x
														ctx: Load 
													op: Mod 
													right: Constant 
														value: int = 2
														kind: NoneType = None
											element: Call 
												func: Name 
													id: str = range
													ctx: Load 
												args: list 
													element: Constant 
														value: int = 10
														kind: NoneType = None
												keywords: list 
										keywords: list 
								keywords: list 
						keywords: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = things
							ctx: Store 
					value: List 
						elts: list 
							element: Tuple 
								elts: list 
									element: Constant 
										value: str = animal
										kind: NoneType = None
									element: Constant 
										value: str = bear
										kind: NoneType = None
								ctx: Load 
							element: Tuple 
								elts: list 
									element: Constant 
										value: str = animal
										kind: NoneType = None
									element: Constant 
										value: str = duck
										kind: NoneType = None
								ctx: Load 
							element: Tuple 
								elts: list 
									element: Constant 
										value: str = plant
										kind: NoneType = None
									element: Constant 
										value: str = cactus
										kind: NoneType = None
								ctx: Load 
							element: Tuple 
								elts: list 
									element: Constant 
										value: str = vehicle
										kind: NoneType = None
									element: Constant 
										value: str = speed boat
										kind: NoneType = None
								ctx: Load 
							element: Tuple 
								elts: list 
									element: Constant 
										value: str = vehicle
										kind: NoneType = None
									element: Constant 
										value: str = school bus
										kind: NoneType = None
								ctx: Load 
						ctx: Load 
					type_comment: NoneType = None
				element: For 
					target: Tuple 
						elts: list 
							element: Name 
								id: str = key
								ctx: Store 
							element: Name 
								id: str = group
								ctx: Store 
						ctx: Store 
					iter: Call 
						func: Name 
							id: str = groupby
							ctx: Load 
						args: list 
							element: Name 
								id: str = things
								ctx: Load 
							element: Lambda 
								args: arguments 
									posonlyargs: list 
									args: list 
										element: arg 
											arg: str = x
											annotation: NoneType = None
											type_comment: NoneType = None
									vararg: NoneType = None
									kwonlyargs: list 
									kw_defaults: list 
									kwarg: NoneType = None
									defaults: list 
								body: Subscript 
									value: Name 
										id: str = x
										ctx: Load 
									slice: Constant 
										value: int = 0
										kind: NoneType = None
									ctx: Load 
						keywords: list 
					body: list 
						element: For 
							target: Name 
								id: str = thing
								ctx: Store 
							iter: Name 
								id: str = group
								ctx: Load 
							body: list 
								element: Expr 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = autoTester
												ctx: Load 
											attr: str = check
											ctx: Load 
										args: list 
											element: Call 
												func: Attribute 
													value: Constant 
														value: str = A {} is a {}.
														kind: NoneType = None
													attr: str = format
													ctx: Load 
												args: list 
													element: Subscript 
														value: Name 
															id: str = thing
															ctx: Load 
														slice: Constant 
															value: int = 1
															kind: NoneType = None
														ctx: Load 
													element: Name 
														id: str = key
														ctx: Load 
												keywords: list 
										keywords: list 
							orelse: list 
							type_comment: NoneType = None
						element: Expr 
							value: Call 
								func: Attribute 
									value: Name 
										id: str = autoTester
										ctx: Load 
									attr: str = check
									ctx: Load 
								args: list 
									element: Constant 
										value: str =  
										kind: NoneType = None
								keywords: list 
					orelse: list 
					type_comment: NoneType = None
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Constant 
								value: str = islice
								kind: NoneType = None
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = islice
											ctx: Load 
										args: list 
											element: List 
												elts: list 
													element: Constant 
														value: int = 1
														kind: NoneType = None
													element: Constant 
														value: int = 2
														kind: NoneType = None
													element: Constant 
														value: int = 3
														kind: NoneType = None
													element: Constant 
														value: int = 4
														kind: NoneType = None
													element: Constant 
														value: int = 5
														kind: NoneType = None
													element: Constant 
														value: int = 6
														kind: NoneType = None
													element: Constant 
														value: int = 7
														kind: NoneType = None
													element: Constant 
														value: int = 8
														kind: NoneType = None
													element: Constant 
														value: int = 9
														kind: NoneType = None
													element: Constant 
														value: int = 10
														kind: NoneType = None
												ctx: Load 
											element: Constant 
												value: int = 2
												kind: NoneType = None
											element: Constant 
												value: int = 9
												kind: NoneType = None
											element: Constant 
												value: int = 2
												kind: NoneType = None
										keywords: list 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Constant 
								value: str = starmap
								kind: NoneType = None
							element: ListComp 
								elt: Call 
									func: Name 
										id: str = int
										ctx: Load 
									args: list 
										element: Name 
											id: str = x
											ctx: Load 
									keywords: list 
								generators: list 
									element: comprehension 
										target: Name 
											id: str = x
											ctx: Store 
										iter: Call 
											func: Name 
												id: str = starmap
												ctx: Load 
											args: list 
												element: Name 
													id: str = pow
													ctx: Load 
												element: List 
													elts: list 
														element: Tuple 
															elts: list 
																element: Constant 
																	value: int = 2
																	kind: NoneType = None
																element: Constant 
																	value: int = 5
																	kind: NoneType = None
															ctx: Load 
														element: Tuple 
															elts: list 
																element: Constant 
																	value: int = 3
																	kind: NoneType = None
																element: Constant 
																	value: int = 2
																	kind: NoneType = None
															ctx: Load 
														element: Tuple 
															elts: list 
																element: Constant 
																	value: int = 10
																	kind: NoneType = None
																element: Constant 
																	value: int = 3
																	kind: NoneType = None
															ctx: Load 
													ctx: Load 
											keywords: list 
										ifs: list 
										is_async: int = 0
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Constant 
								value: str = takewhile
								kind: NoneType = None
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = takewhile
											ctx: Load 
										args: list 
											element: Lambda 
												args: arguments 
													posonlyargs: list 
													args: list 
														element: arg 
															arg: str = x
															annotation: NoneType = None
															type_comment: NoneType = None
													vararg: NoneType = None
													kwonlyargs: list 
													kw_defaults: list 
													kwarg: NoneType = None
													defaults: list 
												body: Compare 
													left: Name 
														id: str = x
														ctx: Load 
													ops: list 
														element: Lt 
													comparators: list 
														element: Constant 
															value: int = 5
															kind: NoneType = None
											element: List 
												elts: list 
													element: Constant 
														value: int = 1
														kind: NoneType = None
													element: Constant 
														value: int = 4
														kind: NoneType = None
													element: Constant 
														value: int = 6
														kind: NoneType = None
													element: Constant 
														value: int = 4
														kind: NoneType = None
													element: Constant 
														value: int = 1
														kind: NoneType = None
												ctx: Load 
										keywords: list 
								keywords: list 
						keywords: list 
				element: Assign 
					targets: list 
						element: Tuple 
							elts: list 
								element: Name 
									id: str = i1
									ctx: Store 
								element: Name 
									id: str = i2
									ctx: Store 
							ctx: Store 
					value: Call 
						func: Name 
							id: str = tee
							ctx: Load 
						args: list 
							element: Call 
								func: Name 
									id: str = islice
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = count
											ctx: Load 
										args: list 
										keywords: list 
									element: Constant 
										value: int = 5
										kind: NoneType = None
								keywords: list 
						keywords: list 
					type_comment: NoneType = None
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Constant 
								value: str = tee
								kind: NoneType = None
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Name 
										id: str = i1
										ctx: Load 
								keywords: list 
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Name 
										id: str = i1
										ctx: Load 
								keywords: list 
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Name 
										id: str = i2
										ctx: Load 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Constant 
								value: str = product
								kind: NoneType = None
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = product
											ctx: Load 
										args: list 
											element: Constant 
												value: str = ABCD
												kind: NoneType = None
											element: Constant 
												value: str = xy
												kind: NoneType = None
										keywords: list 
								keywords: list 
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = product
											ctx: Load 
										args: list 
											element: Call 
												func: Name 
													id: str = range
													ctx: Load 
												args: list 
													element: Constant 
														value: int = 2
														kind: NoneType = None
												keywords: list 
										keywords: list 
											element: keyword 
												arg: str = repeat
												value: Constant 
													value: int = 3
													kind: NoneType = None
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Constant 
								value: str = permutations
								kind: NoneType = None
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = permutations
											ctx: Load 
										args: list 
											element: Constant 
												value: str = ABCD
												kind: NoneType = None
										keywords: list 
								keywords: list 
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = permutations
											ctx: Load 
										args: list 
											element: Constant 
												value: str = ABCD
												kind: NoneType = None
											element: Constant 
												value: int = 2
												kind: NoneType = None
										keywords: list 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Constant 
								value: str = combinations
								kind: NoneType = None
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = combinations
											ctx: Load 
										args: list 
											element: Constant 
												value: str = ABCD
												kind: NoneType = None
											element: Constant 
												value: int = 2
												kind: NoneType = None
										keywords: list 
								keywords: list 
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = combinations
											ctx: Load 
										args: list 
											element: List 
												elts: list 
													element: Constant 
														value: int = 1
														kind: NoneType = None
													element: Constant 
														value: int = 2
														kind: NoneType = None
													element: Constant 
														value: int = 3
														kind: NoneType = None
													element: Constant 
														value: int = 4
														kind: NoneType = None
													element: Constant 
														value: int = 5
														kind: NoneType = None
												ctx: Load 
											element: Constant 
												value: int = 3
												kind: NoneType = None
										keywords: list 
								keywords: list 
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = combinations
											ctx: Load 
										args: list 
											element: Call 
												func: Name 
													id: str = islice
													ctx: Load 
												args: list 
													element: Call 
														func: Name 
															id: str = count
															ctx: Load 
														args: list 
														keywords: list 
													element: Constant 
														value: int = 6
														kind: NoneType = None
												keywords: list 
											element: Constant 
												value: int = 4
												kind: NoneType = None
										keywords: list 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Constant 
								value: str = combinations_with_replacement
								kind: NoneType = None
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = combinations_with_replacement
											ctx: Load 
										args: list 
											element: Constant 
												value: str = ABCD
												kind: NoneType = None
											element: Constant 
												value: int = 2
												kind: NoneType = None
										keywords: list 
								keywords: list 
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = combinations_with_replacement
											ctx: Load 
										args: list 
											element: List 
												elts: list 
													element: Constant 
														value: int = 1
														kind: NoneType = None
													element: Constant 
														value: int = 2
														kind: NoneType = None
													element: Constant 
														value: int = 3
														kind: NoneType = None
													element: Constant 
														value: int = 4
														kind: NoneType = None
													element: Constant 
														value: int = 5
														kind: NoneType = None
												ctx: Load 
											element: Constant 
												value: int = 3
												kind: NoneType = None
										keywords: list 
								keywords: list 
							element: Call 
								func: Name 
									id: str = list
									ctx: Load 
								args: list 
									element: Call 
										func: Name 
											id: str = combinations_with_replacement
											ctx: Load 
										args: list 
											element: Call 
												func: Name 
													id: str = islice
													ctx: Load 
												args: list 
													element: Call 
														func: Name 
															id: str = count
															ctx: Load 
														args: list 
														keywords: list 
													element: Constant 
														value: int = 6
														kind: NoneType = None
												keywords: list 
											element: Constant 
												value: int = 4
												kind: NoneType = None
										keywords: list 
								keywords: list 
						keywords: list 
			decorator_list: list 
			returns: NoneType = None
			type_comment: NoneType = None
	type_ignores: list 
file: Module 
	body: list 
		element: Import 
			names: list 
				element: alias 
					name: str = math
					asname: NoneType = None
		element: FunctionDef 
			name: str = run
			args: arguments 
				posonlyargs: list 
				args: list 
					element: arg 
						arg: str = autoTester
						annotation: NoneType = None
						type_comment: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = aDict
							ctx: Store 
					value: Dict 
						keys: list 
							element: Constant 
								value: str = one
								kind: NoneType = None
						values: list 
							element: Constant 
								value: int = 1
								kind: NoneType = None
					type_comment: NoneType = None
				element: Assign 
					targets: list 
						element: Name 
							id: str = aSet
							ctx: Store 
					value: Set 
						elts: list 
							element: Constant 
								value: str = rose
								kind: NoneType = None
					type_comment: NoneType = None
				element: Assign 
					targets: list 
						element: Name 
							id: str = anArray
							ctx: Store 
					value: List 
						elts: list 
							element: Constant 
								value: str = hundred
								kind: NoneType = None
							element: Constant 
								value: int = 100
								kind: NoneType = None
							element: Constant 
								value: str = pi
								kind: NoneType = None
							element: Constant 
								value: float = 3.14
								kind: NoneType = None
							element: Constant 
								value: str = e
								kind: NoneType = None
							element: Constant 
								value: float = 2.74
								kind: NoneType = None
							element: Constant 
								value: str = dozen
								kind: NoneType = None
							element: Constant 
								value: int = 12
								kind: NoneType = None
						ctx: Load 
					type_comment: NoneType = None
				element: Assign 
					targets: list 
						element: Name 
							id: str = anInt
							ctx: Store 
					value: Constant 
						value: int = 144
						kind: NoneType = None
					type_comment: NoneType = None
				element: Assign 
					targets: list 
						element: Name 
							id: str = aFloat
							ctx: Store 
					value: Constant 
						value: float = 3.14
						kind: NoneType = None
					type_comment: NoneType = None
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = aDict
								ctx: Load 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Call 
								func: Name 
									id: str = str
									ctx: Load 
								args: list 
									element: Name 
										id: str = aDict
										ctx: Load 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Call 
								func: Name 
									id: str = repr
									ctx: Load 
								args: list 
									element: Name 
										id: str = aDict
										ctx: Load 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Call 
								func: Attribute 
									value: Constant 
										value: str = aDictionary: ({}, {})
										kind: NoneType = None
									attr: str = format
									ctx: Load 
								args: list 
									element: Name 
										id: str = aDict
										ctx: Load 
									element: Subscript 
										value: Name 
											id: str = aDict
											ctx: Load 
										slice: Constant 
											value: str = one
											kind: NoneType = None
										ctx: Load 
								keywords: list 
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: JoinedStr 
								values: list 
									element: Constant 
										value: str = aDictionary: (
										kind: NoneType = None
									element: FormattedValue 
										value: Name 
											id: str = aDict
											ctx: Load 
										conversion: int = -1
										format_spec: NoneType = None
									element: Constant 
										value: str = , 
										kind: NoneType = None
									element: FormattedValue 
										value: Subscript 
											value: Name 
												id: str = aDict
												ctx: Load 
											slice: Constant 
												value: str = one
												kind: NoneType = None
											ctx: Load 
										conversion: int = -1
										format_spec: NoneType = None
									element: Constant 
										value: str = )
										kind: NoneType = None
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: JoinedStr 
								values: list 
									element: Constant 
										value: str = aSet: (
										kind: NoneType = None
									element: FormattedValue 
										value: Name 
											id: str = aSet
											ctx: Load 
										conversion: int = -1
										format_spec: NoneType = None
									element: Constant 
										value: str = , 
										kind: NoneType = None
									element: FormattedValue 
										value: Compare 
											left: Constant 
												value: str = rose
												kind: NoneType = None
											ops: list 
												element: In 
											comparators: list 
												element: Name 
													id: str = aSet
													ctx: Load 
										conversion: int = -1
										format_spec: NoneType = None
									element: Constant 
										value: str = )
										kind: NoneType = None
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: JoinedStr 
								values: list 
									element: Constant 
										value: str = anArray (
										kind: NoneType = None
									element: FormattedValue 
										value: Name 
											id: str = anArray
											ctx: Load 
										conversion: int = -1
										format_spec: NoneType = None
									element: Constant 
										value: str = , 
										kind: NoneType = None
									element: FormattedValue 
										value: Subscript 
											value: Name 
												id: str = anArray
												ctx: Load 
											slice: Slice 
												lower: Constant 
													value: int = 1
													kind: NoneType = None
												upper: Constant 
													value: int = 4
													kind: NoneType = None
												step: NoneType = None
											ctx: Load 
										conversion: int = -1
										format_spec: NoneType = None
									element: Constant 
										value: str = , 
										kind: NoneType = None
									element: FormattedValue 
										value: Subscript 
											value: Name 
												id: str = anArray
												ctx: Load 
											slice: Constant 
												value: int = 5
												kind: NoneType = None
											ctx: Load 
										conversion: int = -1
										format_spec: NoneType = None
									element: Constant 
										value: str = )
										kind: NoneType = None
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: JoinedStr 
								values: list 
									element: Constant 
										value: str = anInt (
										kind: NoneType = None
									element: FormattedValue 
										value: Name 
											id: str = anInt
											ctx: Load 
										conversion: int = -1
										format_spec: NoneType = None
									element: Constant 
										value: str = , 
										kind: NoneType = None
									element: FormattedValue 
										value: Call 
											func: Name 
												id: str = int
												ctx: Load 
											args: list 
												element: Call 
													func: Attribute 
														value: Name 
															id: str = math
															ctx: Load 
														attr: str = sqrt
														ctx: Load 
													args: list 
														element: Name 
															id: str = anInt
															ctx: Load 
													keywords: list 
											keywords: list 
										conversion: int = -1
										format_spec: NoneType = None
									element: Constant 
										value: str = )
										kind: NoneType = None
						keywords: list 
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: JoinedStr 
								values: list 
									element: Constant 
										value: str = aFloat (
										kind: NoneType = None
									element: FormattedValue 
										value: Name 
											id: str = aFloat
											ctx: Load 
										conversion: int = -1
										format_spec: NoneType = None
									element: Constant 
										value: str = , 
										kind: NoneType = None
									element: FormattedValue 
										value: Call 
											func: Name 
												id: str = round
												ctx: Load 
											args: list 
												element: Call 
													func: Attribute 
														value: Name 
															id: str = math
															ctx: Load 
														attr: str = sin
														ctx: Load 
													args: list 
														element: BinOp 
															left: Name 
																id: str = aFloat
																ctx: Load 
															op: Add 
															right: Constant 
																value: float = 2.74
																kind: NoneType = None
													keywords: list 
												element: Constant 
													value: int = 2
													kind: NoneType = None
											keywords: list 
										conversion: int = -1
										format_spec: NoneType = None
									element: Constant 
										value: str = )
										kind: NoneType = None
						keywords: list 
			decorator_list: list 
			returns: NoneType = None
			type_comment: NoneType = None
	type_ignores: list 
file: Module 
	body: list 
		element: FunctionDef 
			name: str = f
			args: arguments 
				posonlyargs: list 
				args: list 
					element: arg 
						arg: str = x
						annotation: NoneType = None
						type_comment: NoneType = None
					element: arg 
						arg: str = b
						annotation: NoneType = None
						type_comment: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Return 
					value: IfExp 
						test: Name 
							id: str = b
							ctx: Load 
						body: BinOp 
							left: Name 
								id: str = x
								ctx: Load 
							op: Mult 
							right: Name 
								id: str = x
								ctx: Load 
						orelse: BinOp 
							left: Name 
								id: str = x
								ctx: Load 
							op: Add 
							right: Name 
								id: str = x
								ctx: Load 
			decorator_list: list 
			returns: NoneType = None
			type_comment: NoneType = None
		element: FunctionDef 
			name: str = run
			args: arguments 
				posonlyargs: list 
				args: list 
					element: arg 
						arg: str = autoTester
						annotation: NoneType = None
						type_comment: NoneType = None
				vararg: NoneType = None
				kwonlyargs: list 
				kw_defaults: list 
				kwarg: NoneType = None
				defaults: list 
			body: list 
				element: Assign 
					targets: list 
						element: Name 
							id: str = bools
							ctx: Store 
					value: Tuple 
						elts: list 
							element: Constant 
								value: bool = False
								kind: NoneType = None
							element: Constant 
								value: bool = True
								kind: NoneType = None
						ctx: Load 
					type_comment: NoneType = None
				element: For 
					target: Name 
						id: str = a
						ctx: Store 
					iter: Name 
						id: str = bools
						ctx: Load 
					body: list 
						element: For 
							target: Name 
								id: str = b
								ctx: Store 
							iter: Name 
								id: str = bools
								ctx: Load 
							body: list 
								element: Expr 
									value: Call 
										func: Attribute 
											value: Name 
												id: str = autoTester
												ctx: Load 
											attr: str = check
											ctx: Load 
										args: list 
											element: Call 
												func: Name 
													id: str = f
													ctx: Load 
												args: list 
													element: IfExp 
														test: Name 
															id: str = a
															ctx: Load 
														body: Constant 
															value: int = 10
															kind: NoneType = None
														orelse: Constant 
															value: int = 100
															kind: NoneType = None
													element: Name 
														id: str = b
														ctx: Load 
												keywords: list 
										keywords: list 
							orelse: list 
							type_comment: NoneType = None
					orelse: list 
					type_comment: NoneType = None
				element: For 
					target: Name 
						id: str = p
						ctx: Store 
					iter: Name 
						id: str = bools
						ctx: Load 
					body: list 
						element: For 
							target: Name 
								id: str = q
								ctx: Store 
							iter: Name 
								id: str = bools
								ctx: Load 
							body: list 
								element: For 
									target: Name 
										id: str = r
										ctx: Store 
									iter: Name 
										id: str = bools
										ctx: Load 
									body: list 
										element: Expr 
											value: Call 
												func: Attribute 
													value: Name 
														id: str = autoTester
														ctx: Load 
													attr: str = check
													ctx: Load 
												args: list 
													element: IfExp 
														test: Name 
															id: str = p
															ctx: Load 
														body: Constant 
															value: str = a
															kind: NoneType = None
														orelse: IfExp 
															test: Name 
																id: str = q
																ctx: Load 
															body: Constant 
																value: str = b
																kind: NoneType = None
															orelse: IfExp 
																test: Name 
																	id: str = r
																	ctx: Load 
																body: Constant 
																	value: str = c
																	kind: NoneType = None
																orelse: Constant 
																	value: str = d
																	kind: NoneType = None
												keywords: list 
										element: Assign 
											targets: list 
												element: Name 
													id: str = a
													ctx: Store 
											value: IfExp 
												test: Name 
													id: str = r
													ctx: Load 
												body: IfExp 
													test: Name 
														id: str = q
														ctx: Load 
													body: IfExp 
														test: Name 
															id: str = p
															ctx: Load 
														body: Constant 
															value: str = e
															kind: NoneType = None
														orelse: Constant 
															value: str = f
															kind: NoneType = None
													orelse: Constant 
														value: str = g
														kind: NoneType = None
												orelse: Constant 
													value: str = h
													kind: NoneType = None
											type_comment: NoneType = None
										element: Assign 
											targets: list 
												element: Name 
													id: str = b
													ctx: Store 
											value: IfExp 
												test: Name 
													id: str = p
													ctx: Load 
												body: Constant 
													value: str = i
													kind: NoneType = None
												orelse: IfExp 
													test: Name 
														id: str = q
														ctx: Load 
													body: Constant 
														value: str = j
														kind: NoneType = None
													orelse: IfExp 
														test: Name 
															id: str = r
															ctx: Load 
														body: Constant 
															value: str = k
															kind: NoneType = None
														orelse: Constant 
															value: str = l
															kind: NoneType = None
											type_comment: NoneType = None
										element: Assign 
											targets: list 
												element: Name 
													id: str = c
													ctx: Store 
											value: IfExp 
												test: IfExp 
													test: Name 
														id: str = q
														ctx: Load 
													body: Name 
														id: str = p
														ctx: Load 
													orelse: Name 
														id: str = r
														ctx: Load 
												body: Constant 
													value: str = m
													kind: NoneType = None
												orelse: Constant 
													value: str = n
													kind: NoneType = None
											type_comment: NoneType = None
										element: Assign 
											targets: list 
												element: Name 
													id: str = d
													ctx: Store 
											value: IfExp 
												test: Compare 
													left: Name 
														id: str = p
														ctx: Load 
													ops: list 
														element: Lt 
														element: LtE 
													comparators: list 
														element: Name 
															id: str = q
															ctx: Load 
														element: Name 
															id: str = r
															ctx: Load 
												body: Constant 
													value: str = o
													kind: NoneType = None
												orelse: Constant 
													value: str = p
													kind: NoneType = None
											type_comment: NoneType = None
										element: Expr 
											value: Call 
												func: Attribute 
													value: Name 
														id: str = autoTester
														ctx: Load 
													attr: str = check
													ctx: Load 
												args: list 
													element: Name 
														id: str = a
														ctx: Load 
													element: Name 
														id: str = b
														ctx: Load 
													element: Name 
														id: str = c
														ctx: Load 
													element: Name 
														id: str = d
														ctx: Load 
												keywords: list 
									orelse: list 
									type_comment: NoneType = None
							orelse: list 
							type_comment: NoneType = None
					orelse: list 
					type_comment: NoneType = None
				element: Assign 
					targets: list 
						element: Name 
							id: str = odd
							ctx: Store 
					value: ListComp 
						elt: IfExp 
							test: BinOp 
								left: Name 
									id: str = x
									ctx: Load 
								op: Mod 
								right: Constant 
									value: int = 2
									kind: NoneType = None
							body: Name 
								id: str = x
								ctx: Load 
							orelse: BinOp 
								left: Name 
									id: str = x
									ctx: Load 
								op: Add 
								right: Constant 
									value: int = 1
									kind: NoneType = None
						generators: list 
							element: comprehension 
								target: Name 
									id: str = x
									ctx: Store 
								iter: Call 
									func: Name 
										id: str = range
										ctx: Load 
									args: list 
										element: Constant 
											value: int = 10
											kind: NoneType = None
									keywords: list 
								ifs: list 
								is_async: int = 0
					type_comment: NoneType = None
				element: Assign 
					targets: list 
						element: Name 
							id: str = noDuplicates
							ctx: Store 
					value: Call 
						func: Name 
							id: str = set
							ctx: Load 
						args: list 
							element: Name 
								id: str = odd
								ctx: Load 
						keywords: list 
					type_comment: NoneType = None
				element: Expr 
					value: Call 
						func: Attribute 
							value: Name 
								id: str = autoTester
								ctx: Load 
							attr: str = check
							ctx: Load 
						args: list 
							element: Name 
								id: str = odd
								ctx: Load 
							element: Name 
								id: str = noDuplicates
								ctx: Load 
						keywords: list 
			decorator_list: list 
			returns: NoneType = None
			type_comment: NoneType = None
	type_ignores: list 